#!/usr/bin/perl

# Copyright (C) 2016-2018 Stefano Zacchiroli <zack@upsilon.cc>
#           (C) 2018 Martin Michlmayr <tbm@cyrius.com>
# License: GNU General Public License (GPL), version 3 or above

# convert a ledger-cli main ledger file to beancount format

use strict;
use warnings;
use experimental 'smartmatch';

use Carp::Assert;
use Date::Calc qw(Add_Delta_Days);
use POSIX qw(ceil);
use File::BaseDir qw/config_home/;
use YAML::XS qw(LoadFile);


my @config_files = ('ledger2beancount.yml', config_home('ledger2beancount', 'config.yml'));
my $config;
foreach my $config_file (@config_files) {
    if (-r $config_file) {
	$config = LoadFile($config_file);
	last;
    }
}
die "No config file found (tried ", (join ", ", @config_files), ")\n" if !$config;

# regular expression snippets used for ledger parsing
my $date_RE = qr/[0-9-]+/;
my $flags_RE = qr/[*!]/;
my $txn_header_RE = qr/^(?<date>$date_RE)(=(?<altdate>$date_RE))?\s*(?<flag>$flags_RE)?(\s+\((?<code>.*?)\))?\s+(?<narration>.*)/;
my $tags_RE = qr/(?<tags>[\w:-]+)/;
my $account_RE = qr/[A-Z].*?/;
my $value_RE = qr/[\d.-]+/;
my $commodity_RE = qr/[A-Za-z0-9_"^&]+/;
my $amount_RE = qr/(?<value>$value_RE)\s+(?<commodity>$commodity_RE)/;
my $comment_RE = qr/;\s*(?<comment>.*)/;
my $metadata_RE = qr/^;\s*(?<key>[\w-]+):(?<typed>:)?\s*(?<value>.*)/;
my $posting_RE = qr/(?<posting>((?<flag>$flags_RE)\s+)?(?<account>$account_RE)(  |\t|$)\s*(?<amount>$amount_RE)?(?<altdatestrip>\s*;\s*\[=(?<altdate>$date_RE)\])?)/;
my $price_RE = qr/^P\s+(?<date>$date_RE)\s+(\d\d:\d\d(:\d\d)?\s+)?(?<commodity1>$commodity_RE)\s+(?<value>$value_RE)\s+(?<commodity2>$commodity_RE)/;


# indent some content at a given depth in beancount style
sub indent($$) {
    my ($depth, $content) = @_;

    return ' ' x ($depth * $config->{beancount_indent}) . $content;
}


sub escape_beancount_string($) {
    my ($s) = @_;
    $s =~ s/"/\\"/g;
    return $s;
}

# return a beancount string literal, with a given content
sub mk_beancount_string($) {
    my ($s) = @_;
    return '"' . escape_beancount_string($s) . '"';
}

# parse a ledger value. Usually to extract "semantic" values from typed
# metadata
sub parse_ledger_value($) {
    my ($raw) = @_;
    my $value;

    if ($raw =~ /^\[(?<date>\d{4}-\d{2}-\d{2})\]$/) {
	$value = $+{date};
    } else {
	$value = $raw;
    }

    return $value;
}


# Simple parsing state machine: we need to look ahead for payee metadata, as in
# beancount they appear on the first line of a transaction, whereas in ledger
# they appear as a regular metadata ("x-payee"). The following functions
# support the parsing state machine for this:
my ($in_txn, $in_postings,
    %cur_txn_header, @cur_txn_lines, @cur_txn_assertions);


# reset current parsing state, reinitializing it to the empty state
sub reset_cur_txn() {
    $in_txn = 0;  # whether we are currently in a txn block
    $in_postings = 0;  # whether we are currently within postings (i.e., past txn metadata)
    %cur_txn_header = ();  # txn header, i.e., its first line
    @cur_txn_lines = ();  # txn lines, i.e., all lines except the header
    @cur_txn_assertions = ();  # balance assertions related to txn
}
reset_cur_txn();


# pretty print the transaction header (i.e., its first line) in beancount
# format
sub pp_cur_header() {
    my $buf = "";

    $buf .= $cur_txn_header{date} . " ";
    $buf .= $cur_txn_header{flag} . " ";
    if (exists $cur_txn_header{payee}) {
	$buf .= (mk_beancount_string $cur_txn_header{payee}) . " ";
    }
    $buf .= mk_beancount_string $cur_txn_header{narration};
    if (exists $cur_txn_header{tags}) {
        $buf .= $cur_txn_header{tags};
    }

    return $buf;
}

# pretty print subsequent lines (all but the first) of a transaction, in
# beancount format
sub pp_cur_lines() {
    return (join "\n", @cur_txn_lines) . "\n";
}

# pretty print pending balance assertions, in beancount format
sub pp_cur_assertions() {
    return (join "\n", @cur_txn_assertions) . "\n";
}

# pretty print a single metadata key/value paris, in beancount format
sub pp_metadata($$) {
    my ($key, $value) = @_;

    return "$key: $value";
}


# determine whether something should be a link or a tag
sub tag_or_link(@) {
    my ($key) = @_;

    foreach my $link_RE (@{$config->{link_tags}}) {
	return '^' . $key if $key =~ /$link_RE/;
    }
    return "#" . $key;
}


# pretty print in-transaction tags, in beancount format
sub pp_tags(@) {
    my @tags = @_;

    # XXX workaround for the fact that per-posting tags are currently not
    # allowed.  See:
    # https://groups.google.com/forum/#!topic/beancount/XPtFOnqCVws
    if ($config->{tag_as_metadata}) {
	return "tags: \"" . join(', ', @tags) . "\"";
    } else {
	return join(' ', map tag_or_link($_), @tags);
    }
}

# dump the current parsing state to stdout. Used for debugging purposes only
sub dump_cur_txn() {
    if ($in_txn) {
	print "D: cur_header: " . pp_cur_header() . "\n";
	print "D: cur_lines_begin\n";
	print pp_cur_lines();
	print "D: cur_lines_end\n";
    } else {
	print "D: no txn\n";
    }
}


# set the current transaction header (= first line), overriding the previous
# value (which should *usually* be empty, but it is the caller responsibility
# to ensure this is the case)
sub push_header($$$) {
    my ($date, $flag, $narration) = @_;

    $in_txn = 1;
    $cur_txn_header{date} = $date;
    $cur_txn_header{flag} = $flag;
    $cur_txn_header{narration} = $narration;
}

# set the current transaction payee, complementing the transaction header
sub push_payee($) {
    my ($payee) = @_;
    $cur_txn_header{payee} = $payee;
}

# add a transaction line. Call this multiple times to accmulate lines that will
# be emitted as soon as the transaction is over
sub push_line($$) {
    my ($depth, $line) = @_;

    $in_postings = 1 if $line =~ /^$posting_RE/;
    push @cur_txn_lines, indent($depth, $line);
}

# add a balance assertion to be published at the end of current transaction
sub push_assertion($$) {
    my ($account, $amount) = @_;

    # beancount evalutes balance assertions at the beginning of the day,
    # whereas ledger evalutes them at the end of the txn. So we schedule the
    # balance assertion for *after* the origin txn. This assumes that there
    # are no *other* txn in the same day that change the balance again.
    my $assertion_date = sprintf("%04d-%02d-%02d",
				 Add_Delta_Days(split(/-/, $cur_txn_header{date}), 1));
    push @cur_txn_assertions, "$assertion_date balance $account  $amount";
}

# add a metadata line. Wrapper around push_line() for metadata
sub push_metadata($$$) {
    my ($depth, $key, $value) = @_;
    push_line $depth, pp_metadata($key, $value);
}

# add a comment line. Wrapper around push_line() for comments
sub push_comment($$) {
    my ($depth, $comment) = @_;

    # XXX as a workaround for bug
    # https://bitbucket.org/blais/beancount/issues/143/full-line-comments-not-allowed-within
    # we store comments as "comment: text" metadata entries (rather than
    # beancount comments)

    if (@cur_txn_lines and
	$cur_txn_lines[-1] =~ /^\s*comment:\s+"(?<comment>.*)"/s) {
	# last pushed (logical) line was a comment too, treat it as a
	# multi-line comment and append current comment payload to it
	pop @cur_txn_lines;
	$comment = "$+{comment}\n"
	    . indent($depth + 1, escape_beancount_string($comment));
	$comment = "\n" . indent($depth +1, $comment)
	    unless $+{comment} =~ /^\n/;
	push_metadata $depth, "comment", "\"$comment\"";
    } else {
	push_metadata $depth, "comment", mk_beancount_string($comment);
    }
}


# return a pretty printed transaction, resetting the current parsing state. This
# is usually called as soon as the end of a transaction (usually an empty line)
# is encountered
sub pop_txn() {
    my $buf = "";

    $buf .= pp_cur_header() . "\n";
    $buf .= pp_cur_lines();
    $buf .= "\n" . pp_cur_assertions() if @cur_txn_assertions;

    reset_cur_txn();

    return $buf;
}


# map a (ledger) metadata key to the desired (beancount) metadata key. Relies
# on the global %metadata_map hash
sub map_metadata($) {
    my ($key) = @_;

    if (exists $config->{metadata_map}{$key}) {
	return $config->{metadata_map}{$key};
    } else {
	return $key;
    }
}


# map a ledger commodity to a beancount commodity
sub map_commodity($) {
    my ($key) = @_;

    return $config->{commodity_map}{$key} if exists $config->{commodity_map}{$key};
    $key =~ s/"//g;
    # Check again after removing the quote
    return $config->{commodity_map}{$key} if exists $config->{commodity_map}{$key};

    return uc $key;
}


# emit a single line
sub print_line($$) {
    my ($depth, $line) = @_;

    print indent($depth, $line), "\n";
}


# emit beancount header
print "option \"operating_currency\" \"$_\"\n" foreach @{$config->{operating_currencies}};
# (due to a current beancount limitation, options
# and plugins must be in the top-level file)
print "include \"$_\"\n" foreach @{$config->{includes}};

if (@{$config->{plugins}}) {
    print <<'EOT';

; plugins listed here because they don't work if declared in included files
; see: https://bitbucket.org/blais/beancount/issues/147
EOT
    print "plugin \"$_\"\n" foreach @{$config->{plugins}};
}

print "\n";


# MAIN CONVERSION LOOP

while (my $l = <>) {
    # print "D: line: ", "\n"; dump_cur_txn(); print "\n";

    # handle line indentation once and for all
    chomp $l;
    $l =~ /^(?<indent>\s*)(?<line>.*)/;
    my $depth = ceil(length($+{indent}) / $config->{ledger_indent});
    # round up with ceil() because we mix 4 (postings) and 2 (posting tags) indent in ledger
    $l = $+{line};

    if ($l =~ /^include\s+(?<filename>.*)\.ledger/) {  # include
	print_line $depth, "include \"$+{filename}.beancount\"";
    } elsif ($l =~ /$txn_header_RE/) {  # txn header
	push_header $+{date}, $+{flag} ? $+{flag} : "txn", $+{narration};
	push_metadata $depth + 1, $config->{altdate_tag}, $+{altdate} if defined $+{altdate} && defined $config->{altdate_tag};
	push_metadata $depth + 1, $config->{code_tag}, mk_beancount_string $+{code} if defined $+{code} && defined $config->{code_tag};
    } elsif ($l =~ /$metadata_RE/ && $in_txn) {  # metadata comment
	my $key = map_metadata(lc($+{key}));
	my $value;
	if (defined($+{typed})) {
	    $value = parse_ledger_value $+{value};
	} else {
	    $value = mk_beancount_string $+{value};
	}
	if (not $in_postings and ($key eq $config->{payee_tag} or $key eq $config->{payer_tag})) {
	    # ASSUMPTION: payer_tag always occurs later than payee_tag, which
	    # is currently enforced in our ledger. This is to guarantee that we
	    # promote payers to payees, because that's the sensible thing to do
	    # with Beancount
	    push_payee $+{value};
	} else {
	    push_metadata $depth, $key, $value;
	}
    } elsif ($l =~ /^$comment_RE\s+:$tags_RE:\s*$/
	     or $l =~ /^;\s+:$tags_RE:\s+(?<comment>.*)$/) {
    	# tags comment
    	if ($in_txn) {
	    if ($config->{tag_as_metadata}) {
		push_line $depth, pp_tags(split(/:/, $+{tags}));
	    } else {
		$cur_txn_header{tags} .= " " . pp_tags(split(/:/, $+{tags})) if $depth == 1;
	    }
    	} else {
    	    print_line $depth, $l;
    	}
    } elsif ($l =~ /^$comment_RE/) {  # (every other) comment
	$in_txn ? push_comment $depth, $+{comment} : print_line $depth, $l;
    } elsif ($l =~ /^$price_RE/) {
	$l = sprintf "$+{date} price %s $+{value} %s", map_commodity $+{commodity1}, map_commodity $+{commodity2};
	$l =~ s/"//g;
	print_line $depth, $l;
    } elsif ($l =~ /^$posting_RE/ || $l =~ /^(?<account>$account_RE)$/) {
	my $account = $+{account};
	my $altdate = $+{altdate};
	# Strip the altdate info
	$l =~ s/\s*\Q$+{altdatestrip}\E// if $+{altdatestrip};

	# Replace ledger account names with corresponding beancount account names
	my $beancount_account = $account;
	$beancount_account = $config->{account_map}{$account} if exists $config->{account_map}{$account};
	$l =~ s/$account/$beancount_account/;

	if ($l =~ /$amount_RE/) {
	    my $commodity = $+{commodity};
	    my $beancount_commodity = map_commodity $commodity;
	    $l =~ s/$commodity/$beancount_commodity/;
	}

	if ($l =~ /^$posting_RE\s*=\s*(?<assertion>$amount_RE)/) {
	    # posting with balance assertion
	    assert $in_txn;
	    push_line $depth, $+{posting};
	    push_assertion $+{account}, $+{assertion};
	} elsif ($l =~ /^$posting_RE(\s+(?<curlyopen>\{\{?)\s*(?<lot_cost>$amount_RE)\s*(?<curlyclose>\}\}?))?\s+(\[(?<date>$date_RE)\])?\s*(?<at>@@?)\s+(?<lot_price>$amount_RE)/) {
	    # posting with unit price and optional lot price
	    # XXX refactor/merge with previous regexp case
	    assert $in_txn;
	    my $date = "";
	    $date = ", $+{date}" if (defined $+{date});
	    if (not defined $+{lot_cost}) {
		# No ledger lot cost, only price.  This one is tricky
		# because this convention can be used for two different
		# purposes:
		# 1) For conversion between currencies where you do not
		# generally wish to retain the cost.
		# 2) To acquire/dispose of commodities (e.g. shares)
		# where you want to retain the cost.
		#
		# Most currencies have 3 characters (e.g. EUR, USD, GBP)
		# whereas commodities often have more (e.g. the ISIN).
		# Therefore, we assume the cost should not be kept if
		# both currencies have 3 characters.  Since this won't
		# work in all cases, we also check for a list of
		# commodities.
		if ((length $+{commodity} == 3 && length((split / /, $+{lot_price}, 2)[1]) == 3)
		    && !($+{commodity} ~~ @{$config->{commodities3char}})) {
		    $l = sprintf "$+{posting} %s $+{lot_price}", "@" x length $+{at};
		} else {
		    $l = sprintf "$+{posting} %s$+{lot_price}$date%s", "{" x length $+{at}, "}" x length $+{at};
		}
	    } elsif ($+{lot_cost} eq $+{lot_price}) {
		# ledger requires you to specify both lot cost and lot price
		# due to a bug.  If both are the same, don't put in the price.
		$l = "$+{posting} $+{curlyopen}$+{lot_price}$date$+{curlyclose}";
	    } else {
		# Both ledger lot cost and lot price.
		$l = "$+{posting} $+{curlyopen}$+{lot_cost}$date$+{curlyclose} $+{at} $+{lot_price}";
	    }
	    push_line $depth, $l;
	} else {
	    push_line $depth, $l;
	}
	push_metadata $depth + 1, $config->{altdate_tag}, $altdate if defined $altdate && defined $config->{altdate_tag};
    } elsif ($l =~ /^$/) {  # empty line
	print pop_txn() if $in_txn;
	print "\n";
    } else {  # everything else
	$in_txn ? push_line $depth, $l : print_line $depth, $l;
    }
}

# emit last transaction, if it's still active when reaching EOF
print pop_txn() if $in_txn;
