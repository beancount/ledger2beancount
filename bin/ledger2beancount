#!/usr/bin/perl

# Copyright (C) 2016-2018 Stefano Zacchiroli <zack@upsilon.cc>
#           (C) 2018 Martin Michlmayr <tbm@cyrius.com>
# License: GNU General Public License (GPL), version 3 or above

# convert a ledger-cli main ledger file to beancount format

use strict;
use warnings;
use experimental 'smartmatch';

use Carp::Assert;
use Date::Calc qw(Add_Delta_Days);
use POSIX qw(ceil);
use File::BaseDir qw/config_home/;
use Config::Onion;
use open qw(:std :locale);


my @config_files = ('ledger2beancount', config_home('ledger2beancount', 'config'));
my $config;
foreach my $config_file (@config_files) {
    $config = Config::Onion->load($config_file);
    # We don't actually use the Config::Onion feature to load several
    # config files.  We merely use it to set some defaults.
    last if defined $config;
}

$config->set_default(date_match => qr"(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})");
$config->set_default(account_open_date => "1970-01-01");
$config->set_default(commodities_date => "1970-01-01");
$config->set_default(payee_tag => "");
$config->set_default(payer_tag => "");
$config->set_default(ledger_indent => 4);
$config->set_default(beancount_indent => 2);

# Make config variables easier to access
$config = $config->get;

# regular expression snippets used for ledger parsing
my $date_RE = qr{$config->{date_match}};
my $flags_RE = qr/[*!]/;
my $txn_header_RE = qr/^(?<date>$date_RE)(=(?<auxdate>$date_RE))?\s*(?<flag>$flags_RE)?(\s+\((?<code>.*?)\))?\s+(?<narration>.*)/;
my $tags_RE = qr/(?<tags>[\w:-]+)/;
my $account_RE = qr/[A-Z].*?/;
my $value_RE = qr/[\d.-]+/;
# ledger doesn't allow digits at the end (has to be a quote) but the
# regex has to match after we strip the quote so we allow digits at end.
my $commodity_RE = qr/[A-Za-z_"][A-Za-z0-9 !_"^&]*[A-Za-z_0-9"]/;
my $amount_RE = qr/(?<num>$value_RE)\s+(?<commodity>$commodity_RE)/;
my $comment_top_level_RE = qr/[;#%|*]\s*(?<comment>.*)/;
my $comment_RE = qr/;\s*(?<comment>.*)/;
my $metadata_RE = qr/;\s*(?<key>[\w-]+):(?<typed>:)?\s*(?<value>.*)/;
my $posting_RE = qr/(?<posting>((?<flag>$flags_RE)\s+)?(?<account>$account_RE)(  |\t|$)\s*(?<amount>$amount_RE)?(?<auxdatestrip>\s*;\s*\[=(?<auxdate>$date_RE)\])?)/;
my $price_RE = qr/^P\s+(?<date>$date_RE)\s+(\d\d:\d\d(:\d\d)?\s+)?(?<commodity1>$commodity_RE)\s+(?<value>$value_RE)\s+(?<commodity2>$commodity_RE)/;


# indent some content at a given depth in beancount style
sub indent($$) {
    my ($depth, $content) = @_;

    return ' ' x ($depth * $config->{beancount_indent}) . $content;
}


sub escape_beancount_string($) {
    my ($s) = @_;
    $s =~ s/"/\\"/g;
    return $s;
}

# return a beancount string literal, with a given content
sub mk_beancount_string($) {
    my ($s) = @_;
    return '"' . escape_beancount_string($s) . '"';
}


# Print a date in ISO 8601 format (YYYY-MM-DD)
sub pp_date($) {
    my ($date) = @_;

    if ($date =~ /$date_RE/) {
	return sprintf "%04d-%02d-%02d", $+{year}, $+{month}, $+{day};
    } else {
	# This can't happen since every caller did a regex match already
	die "Can't parse date $date";
    }
}


# parse a ledger value. Usually to extract "semantic" values from typed
# metadata
sub parse_ledger_value($) {
    my ($raw) = @_;
    my $value;

    if ($raw =~ /^\[(?<date>$date_RE)\]$/) {
	$value = pp_date $+{date};
    } else {
	$value = $raw;
    }

    return $value;
}


# Simple parsing state machine: we need to look ahead for payee metadata, as in
# beancount they appear on the first line of a transaction, whereas in ledger
# they appear as a regular metadata ("x-payee"). The following functions
# support the parsing state machine for this:
my ($in_txn, $in_postings,
    %cur_txn_header, @cur_txn_lines, @cur_txn_assertions);


# reset current parsing state, reinitializing it to the empty state
sub reset_cur_txn() {
    $in_txn = 0;  # whether we are currently in a txn block
    $in_postings = 0;  # whether we are currently within postings (i.e., past txn metadata)
    %cur_txn_header = ();  # txn header, i.e., its first line
    @cur_txn_lines = ();  # txn lines, i.e., all lines except the header
    @cur_txn_assertions = ();  # balance assertions related to txn
}
reset_cur_txn();


# pretty print the transaction header (i.e., its first line) in beancount
# format
sub pp_cur_header() {
    my $buf = "";

    $buf .= $cur_txn_header{date} . " ";
    $buf .= $cur_txn_header{flag} . " ";
    if (exists $cur_txn_header{payee}) {
	$buf .= (mk_beancount_string $cur_txn_header{payee}) . " ";
    }
    $buf .= mk_beancount_string $cur_txn_header{narration};
    if (exists $cur_txn_header{tags}) {
        $buf .= $cur_txn_header{tags};
    }

    return $buf;
}

# pretty print subsequent lines (all but the first) of a transaction, in
# beancount format
sub pp_cur_lines() {
    return (join "\n", @cur_txn_lines) . "\n";
}

# pretty print pending balance assertions, in beancount format
sub pp_cur_assertions() {
    return (join "\n", @cur_txn_assertions) . "\n";
}

# pretty print a single metadata key/value paris, in beancount format
sub pp_metadata($$) {
    my ($key, $value) = @_;

    return "$key: $value";
}


# determine whether something should be a link or a tag
sub tag_or_link(@) {
    my ($key) = @_;

    foreach my $link_RE (@{$config->{link_match}}) {
	return '^' . $key if $key =~ /$link_RE/;
    }
    return "#" . $key;
}


# pretty print in-transaction tags, in beancount format
sub pp_tags(@) {
    my @tags = @_;

    # XXX workaround for the fact that per-posting tags are currently not
    # allowed.  See:
    # https://groups.google.com/forum/#!topic/beancount/XPtFOnqCVws
    if ($config->{tag_as_metadata}) {
	return "tags: \"" . join(', ', @tags) . "\"";
    } else {
	return join(' ', map tag_or_link($_), @tags);
    }
}

# dump the current parsing state to stdout. Used for debugging purposes only
sub dump_cur_txn() {
    if ($in_txn) {
	print "D: cur_header: " . pp_cur_header() . "\n";
	print "D: cur_lines_begin\n";
	print pp_cur_lines();
	print "D: cur_lines_end\n";
    } else {
	print "D: no txn\n";
    }
}


# set the current transaction header (= first line), overriding the previous
# value (which should *usually* be empty, but it is the caller responsibility
# to ensure this is the case)
sub push_header($$$) {
    my ($date, $flag, $narration) = @_;

    $in_txn = 1;
    $cur_txn_header{date} = $date;
    $cur_txn_header{flag} = $flag;
    $cur_txn_header{narration} = $narration;
}

# set the current transaction payee, complementing the transaction header
sub push_payee($) {
    my ($payee) = @_;
    $cur_txn_header{payee} = $payee;
}

# add a transaction line. Call this multiple times to accumulate lines that will
# be emitted as soon as the transaction is over
sub push_line($$) {
    my ($depth, $line) = @_;

    $in_postings = 1 if $line =~ /^$posting_RE/;
    push @cur_txn_lines, indent($depth, $line);
}

# add a balance assertion to be published at the end of current transaction
sub push_assertion($$) {
    my ($account, $amount) = @_;

    # beancount evalutes balance assertions at the beginning of the day,
    # whereas ledger evalutes them at the end of the txn. So we schedule the
    # balance assertion for *after* the origin txn. This assumes that there
    # are no *other* txn in the same day that change the balance again.
    my $assertion_date = sprintf("%04d-%02d-%02d",
				 Add_Delta_Days(split(/-/, $cur_txn_header{date}), 1));
    push @cur_txn_assertions, "$assertion_date balance $account  $amount";
}

# add a metadata line. Wrapper around push_line() for metadata
sub push_metadata($$$) {
    my ($depth, $key, $value) = @_;
    push_line $depth, pp_metadata($key, $value);
}

# add a comment line. Wrapper around push_line() for comments
sub push_comment($$) {
    my ($depth, $comment) = @_;

    # XXX as a workaround for bug
    # https://bitbucket.org/blais/beancount/issues/143/full-line-comments-not-allowed-within
    # we store comments as "comment: text" metadata entries (rather than
    # beancount comments)

    if (@cur_txn_lines and
	$cur_txn_lines[-1] =~ /^\s*comment:\s+"(?<comment>.*)"/s) {
	# last pushed (logical) line was a comment too, treat it as a
	# multi-line comment and append current comment payload to it
	pop @cur_txn_lines;
	$comment = "$+{comment}\n"
	    . indent($depth + 1, escape_beancount_string($comment));
	$comment = "\n" . indent($depth +1, $comment)
	    unless $+{comment} =~ /^\n/;
	push_metadata $depth, "comment", "\"$comment\"";
    } else {
	push_metadata $depth, "comment", mk_beancount_string($comment);
    }
}


# return a pretty printed transaction, resetting the current parsing state. This
# is usually called as soon as the end of a transaction (usually an empty line)
# is encountered
sub pop_txn() {
    my $buf = "";

    $buf .= pp_cur_header() . "\n";
    $buf .= pp_cur_lines();
    $buf .= "\n" . pp_cur_assertions() if @cur_txn_assertions;

    reset_cur_txn();

    return $buf;
}


# Handle metadata
sub handle_metadata($$) {
    #my ($depth, $key, $typed, $value) = @_;
    my ($depth, $metadata) = @_;

    my $key = map_metadata(lc($metadata->{key}));
    if (not $in_postings and ($key eq $config->{payee_tag} or $key eq $config->{payer_tag})) {
	# ASSUMPTION: payer_tag always occurs later than payee_tag, which
	# is currently enforced in our ledger. This is to guarantee that we
	# promote payers to payees, because that's the sensible thing to do
	# with Beancount
	push_payee $metadata->{value};
    } else {
	# Check if we should store as metadata or as links
	# We check for $depth since posting-level links are not allowed
	if (lc $key ~~ [ map lc $_, @{$config->{link_tags}} ] && $depth == 1 && $in_txn) {
	    $cur_txn_header{tags} .= " ^" . $metadata->{value};
	} else {
	    my $value;
	    if (defined($metadata->{typed})) {
		$value = parse_ledger_value $metadata->{value};
	    } else {
		$value = mk_beancount_string $metadata->{value};
	    }
	    push_metadata $depth, $key, $value;
	}
    }
}


# map a (ledger) metadata key to the desired (beancount) metadata key. Relies
# on the global %metadata_map hash
sub map_metadata($) {
    my ($key) = @_;

    if (exists $config->{metadata_map}{$key}) {
	return $config->{metadata_map}{$key};
    } else {
	return $key;
    }
}


# map a ledger account to a beancount account
sub map_account($) {
    my ($account) = @_;

    $account =~ s/ /-/g;
    $account =~ s/:([a-z])/:\U$1\E/g;
    $account =~ s/:(\d+)([^:]+)/:$2$1/g;
    $account = $config->{account_map}{$account} if exists $config->{account_map}{$account};
    return $account;
}


# map a ledger commodity to a beancount commodity
sub map_commodity($) {
    my ($key) = @_;

    return $config->{commodity_map}{$key} if exists $config->{commodity_map}{$key};
    $key =~ s/(^")|("$)//g;
    # Check again after removing the quote
    return $config->{commodity_map}{$key} if exists $config->{commodity_map}{$key};

    # Generate a valid beancount name
    # Dash (-) is not valid in ledger (even with quoted commodity) but valid
    # in beancount
    $key =~ s/[!"^& ]/-/g;

    return $config->{commodity_map}{$key} if exists $config->{commodity_map}{$key};

    # Maxium limit for beancount commodities: 24 characters
    return substr (uc $key, 0, 24);
}

# Replace commodity in string with beancount commodity
sub replace_commodity($) {
    my ($s) = @_;

    if ($s =~ /$amount_RE/) {
	$s =~ s/(\s*)$amount_RE/$1$2 @{[map_commodity($3)]}/;
    }
    return $s;
}

# emit a single line
sub print_line($$) {
    my ($depth, $line) = @_;

    print indent($depth, $line), "\n";
}


# emit a top-level comment: the comment marker ; is put as the first
# character and the rest is indented according to depth.
sub print_comment_top_level($$) {
    my ($depth, $comment) = @_;

    print "; ", indent($depth, $comment), "\n";
}


# Strip indentation from a line and return the depth and line
sub strip_indentation($) {
    my ($line) = @_;

    chomp $line;
    # handle line indentation once and for all
    $line =~ /^(?<indent>\s*)(?<line>.*)/;
    my $depth = ceil(length($+{indent}) / $config->{ledger_indent});
        # round up with ceil() because we mix 4 (postings) and 2 (posting tags) indent in ledger

    return ($depth, $+{line});
}

# Process a ledger transaction
sub process_txn(@) {
    my @txn = @_;

    foreach my $l (@txn) {
	# print "D: line: ", "\n"; dump_cur_txn(); print "\n";

	(my $depth, $l) = strip_indentation($l);

	if ($l =~ /^$metadata_RE/) {  # metadata comment
	    handle_metadata $depth, \%+;
	} elsif ($l =~ /^$comment_RE\s+:$tags_RE:\s*$/
	    or $l =~ /^;\s+:$tags_RE:\s+(?<comment>.*)$/) {
	    # tags comment
	    if ($config->{tag_as_metadata}) {
		push_line $depth, pp_tags(split(/:/, $+{tags}));
	    } else {
		$cur_txn_header{tags} .= " " . pp_tags(split(/:/, $+{tags})) if $depth == 1;
	    }
	    push_comment $depth, $+{comment} if $+{comment} ne "";
	} elsif ($l =~ /^$comment_RE/) {  # (every other) comment
	    push_comment $depth, $+{comment};
	} elsif ($l =~ /^$posting_RE/ || $l =~ /^(?<account>$account_RE)$/) {
	    my $account = $+{account};
	    my $auxdate = $+{auxdate};
	    # Strip the auxdate info
	    $l =~ s/\s*\Q$+{auxdatestrip}\E// if $+{auxdatestrip};

	    # Check for posting-level metadata
	    my %metadata_posting;
	    if ($l =~ s/^($posting_RE)(\s*$metadata_RE)/$1/) {
		%metadata_posting = %+;
	    }

	    # Replace ledger account names with corresponding beancount account names
	    my $beancount_account = map_account $account;
	    $l =~ s/$account/$beancount_account/;

	    $l = replace_commodity $l;

	    if ($l =~ /^$posting_RE\s*=\s*(?<assertion>$amount_RE)/) {
		# posting with balance assertion
		push_line $depth, $+{posting};
		push_assertion $+{account}, $+{assertion};
	    } elsif ($l =~ /^$posting_RE(\s+(?<curlyopen>\{\{?)\s*(?<lot_cost>$amount_RE)\s*(?<curlyclose>\}\}?))?\s*(\[(?<date>$date_RE)\])?\s*(\((?<lot_note>[^@].*)\))?\s*(\(?(?<at>@@?)\)?\s+(?<lot_price>$amount_RE))?/) {
		# posting with unit price and optional lot price
		# XXX refactor/merge with previous regexp case
		my $lot_info = "";
		$lot_info .= ", " . pp_date $+{date} if (defined $+{date});
		$lot_info .= ", " . mk_beancount_string $+{lot_note} if (defined $+{lot_note});
		if (defined $+{lot_price} && not defined $+{lot_cost}) {
		    # No ledger lot cost, only price.  This one is tricky
		    # because this convention can be used for two different
		    # purposes:
		    # 1) For conversion between currencies where you do not
		    # generally wish to retain the cost.
		    # 2) To acquire/dispose of commodities (e.g. shares)
		    # where you want to retain the cost.
		    #
		    # Most currencies have 3 characters (e.g. EUR, USD, GBP)
		    # whereas commodities often have more (e.g. the ISIN).
		    # Therefore, we assume the cost should not be kept if
		    # both currencies have 3 characters.  Since this won't
		    # work in all cases, we also check for a list of
		    # commodities.  Similarly, we allow users to configure
		    # commodities that should be treated as currencies.
		    my $commodity1 = $+{commodity};
		    my $commodity2 = (split / /, replace_commodity $+{lot_price}, 2)[1];
		    if ((length $commodity1 == 3 && length $commodity2 == 3 &&
			!($commodity1 ~~ @{$config->{currency_is_commodity}})) ||
			$commodity1 ~~ @{$config->{commodity_is_currency}} ||
			$commodity2 ~~ @{$config->{commodity_is_currency}}) {
			$l = sprintf "$+{posting} %s %s", "@" x length $+{at}, replace_commodity $+{lot_price};
		    } else {
			$l = sprintf "$+{posting} %s%s%s%s", "{" x length $+{at},
			    replace_commodity $+{lot_price}, $lot_info, "}" x length $+{at};
		    }
		} elsif (defined $+{lot_cost}) {
		    $l = "$+{posting} $+{curlyopen}$+{lot_cost}$lot_info$+{curlyclose}";
		    # ledger requires you to specify both lot cost and lot price
		    # due to a bug.  If both are the same, don't put in the price.
		    if (defined $+{lot_price} && ($+{lot_cost} ne $+{lot_price})) {
			$l .= " $+{at} " . replace_commodity $+{lot_price};
		    }
		}
		push_line $depth, $l;
	    } else {
		push_line $depth, $l;
	    }
	    handle_metadata $depth+1, \%metadata_posting if exists $metadata_posting{key};
	    push_metadata $depth + 1, $config->{auxdate_tag}, pp_date $auxdate if defined $auxdate && defined $config->{auxdate_tag};
	} else {  # everything else
	    push_line $depth, $l;
	}
    }
    print pop_txn();
}


# Read one ledger stanza (everything intended by whitespace)
sub read_stanza($) {
    my ($input_ref) = @_;

    my @stanza = ();
    my $l;
    do {
	$l = @{$input_ref}[0];
	push @stanza, shift @{$input_ref} if $l =~ /^\h+/;
    } while ($l =~ /^\h+/ && @{$input_ref});
    return @stanza;
}


# emit beancount header
print "option \"operating_currency\" \"$_\"\n" foreach @{$config->{operating_currencies}};
# (due to a current beancount limitation, options
# and plugins must be in the top-level file)
print "include \"$_\"\n" foreach @{$config->{includes}};

if (exists $config->{plugins} && @{$config->{plugins}}) {
    print <<'EOT';

; plugins listed here because they don't work if declared in included files
; see: https://bitbucket.org/blais/beancount/issues/147
EOT
    print "plugin \"$_\"\n" foreach @{$config->{plugins}};
}


# MAIN CONVERSION LOOP

unshift(@ARGV, '-') unless @ARGV;
open my $input, $ARGV[0] or die "Can't read $ARGV[0]";
my @input = <$input>;
close $input;
while (@input) {
    my $l = shift @input;
    chomp $l;
    my $depth = 0;
    my @stanza;
    if ($l =~ /^[!@]?include\s+(?<filename>.*)\.ledger/) {  # include
	print_line $depth, "include \"$+{filename}.beancount\"";
    } elsif ($l =~ /^$comment_top_level_RE/) {
	print_comment_top_level $depth, $+{comment};
    } elsif ($l =~ /^[!@]?(comment|test)/) {  # block comment
	@stanza = read_stanza \@input;
	assert $input[0] =~ /^end/;
	shift @input;
	foreach $l (@stanza) {
	    ($depth, $l) = strip_indentation $l;
	    print_line $depth-1, "; $l";
	}
    } elsif ($l =~ /^$price_RE/) {
	$l = sprintf "%s price %s $+{value} %s", pp_date $+{date}, map_commodity $+{commodity1}, map_commodity $+{commodity2};
	$l =~ s/"//g;
	print_line $depth, $l;
    } elsif ($l =~ /^([=~].*)/) {  # automated transaction (=) or periodic transaction (~)
	print_comment_top_level $depth, $1;
	@stanza = read_stanza \@input;
	foreach $l (@stanza) {
	    ($depth, $l) = strip_indentation $l;
	    print_comment_top_level $depth, $l;
	}
    } elsif ($l =~ /^[!@]?account\s+(.*)/) {  # account declaration
	printf "$config->{account_open_date} open %s\n", map_account $1;
	@stanza = read_stanza \@input;
	foreach $l (@stanza) {
	    ($depth, $l) = strip_indentation $l;
	    if ($l =~ /^note\s+(.*)/) {  # note
		print_line $depth, pp_metadata "description", mk_beancount_string $1;
	    } elsif ($l =~ /^$metadata_RE/) {  # metadata
		print_line $depth, pp_metadata $+{key}, mk_beancount_string $+{value};
	    } else {
		print_line $depth, $l;
	    }
	}
    } elsif ($l =~ /^[!@]?commodity\s+(.*)/) {  # commodity declaration
	printf "$config->{commodities_date} commodity %s\n", map_commodity $1;
	@stanza = read_stanza \@input;
	foreach $l (@stanza) {
	    ($depth, $l) = strip_indentation $l;
	    if ($l =~ /^note\s+(.*)/) {  # note
		print_line $depth, pp_metadata "name", mk_beancount_string $1;
	    } elsif ($l =~ /^format\s+(.*)/) {  # format
		next;  # skip directive, not needed in beancount
	    } elsif ($l =~ /^$metadata_RE/) {  # metadata
		print_line $depth, pp_metadata $+{key}, mk_beancount_string $+{value};
	    } else {
		print_line $depth, $l;
	    }
	}
    } elsif ($l =~ /^[!@]?(payee\s+.*)/) {  # payee declaration
	print_comment_top_level $depth, $1;
	@stanza = read_stanza \@input;
	foreach $l (@stanza) {
	    ($depth, $l) = strip_indentation $l;
	    print_comment_top_level $depth, $l;
	}
    } elsif ($l =~ /^[0-9]/) {
	if ($l =~ /$txn_header_RE/) {  # txn header
	    push_header pp_date $+{date}, $+{flag} ? $+{flag} : "txn", $+{narration};
	    push_metadata $depth + 1, $config->{auxdate_tag}, pp_date $+{auxdate} if defined $+{auxdate} && defined $config->{auxdate_tag};
	    push_metadata $depth + 1, $config->{code_tag}, mk_beancount_string $+{code} if defined $+{code} && defined $config->{code_tag};
	    # Determine payee based on the narration field
	    my $narration = $+{narration};
	    foreach my $custom_narration_RE (@{$config->{payee_split}}) {
		if ($narration =~ /$custom_narration_RE/) {
		    push_payee $+{payee};
		    $cur_txn_header{narration} = $+{narration};
		    last;
		}
	    }
	    foreach my $custom_narration_RE (keys %{$config->{payee_match}}) {
		if ($narration =~ /$custom_narration_RE/) {
		    push_payee $config->{payee_match}{$custom_narration_RE};
		    last;
		}
	    }
	} elsif ($l !~ /^$date_RE/) {
	    die "Cannot process date in transaction header: $l\n";
	} else {
	    die "Cannot process transaction header: $l\n";
	}
	@stanza = read_stanza \@input;
	process_txn @stanza;
    } else {
	print_line 0, $l;
    }
}

